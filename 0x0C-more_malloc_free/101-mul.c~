#include "main.h"
#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
/**
 *  _is_zero - checks for zero
 *
 *  @argv: argument vector.
 *
 *  Return: No Return
 */
void _is_zero(char *argv[])
{
int i, numQ1 = 1, numQ2 = 1;
for (i = 0; argv[1][i]; i++)
{
if (argv[1][i] != '0')
{
numQ1 = 0;
break; }
}
for (i = 0; argv[2][i]; i++)
{
if (argv[2][i] != '0')
{
numQ2 = 0;
break; }
}
if (numQ1 == 1 || numQ2 == 1)
{ printf("0\n");
exit(0); }
}

/**
 * _initialize_array - set memeory to 0
 *
 * @ar: array of characters.
 *
 * @lar: length of array.
 *
 * Return: pointer to the allocated memory 
 */
char *_initialize_array(char *ar, int lar)
{
int i = 0;
for (i = 0; i < lar; i++)
{ar[i] = '0'; }
ar[lar] = '\0';
return (ar);
}

/**
 * _checknum - checks the length of the number and base 10
 *
 * @argv: arguments vector.
 *
 * @n: number of arguments.
 *
 * Return: length of the number. or 98 if error.
 */
int _checknum(char *argv[], int n)
{
int len;
for (len = 0; argv[n][len]; len++)
{
if (!isdigit(argv[n][len]))
{ printf("Error\n");
exit(98); }
}
return (len);
}

/**
 * main - program that multiplies two positive numbers.
 *
 * @argc: arguments count 
 *
 * @argv: arguments vector.
 *
 * Return: 0 - success.
 */
int main(int argc, char *argv[])
{
int nl1, nl2, nlout, add, addl, i, j, k, ca;
char *nout;
if (argc != 3)
{ printf("Error\n"), exit(98); }
nl1 = _checknum(argv, 1), nl2 = _checknum(argv, 2);
_is_zero(argv), nlout = nl1 + nl2, nout = malloc(nlout + 1);
if (nout == NULL)
{ printf("Error\n"), exit(98); }
nout = _initialize_array(nout, nlout);
k = nlout - 1, i = nl1 - 1, j = nl2 - 1, ca = addl = 0;
for (; k >= 0; k--, i--)
{ 
if (i < 0)
{ 
if (addl > 0)
{ add = (nout[k] - '0') + addl;
if (add > 9)
nout[k - 1] = (add / 10) + '0';
nout[k] = (add % 10) + '0'; }
i = nl1 - 1, j--, addl = 0, ca++, k = nlout - (1 + ca);
}
if (j < 0)
{
if (nout[0] != '0')
{ break; }
nlout--;
free(nout), nout = malloc(nlout + 1), nout = _initialize_array(nout, nlout);
k = nlout - 1, i = nl1 - 1, j = nl2 - 1, ca = addl = 0;
}
if (j >= 0)
{
add = ((argv[1][i] - '0') * (argv[2][j] - '0')) + (nout[k] - '0') + addl;
addl = add / 10, nout[k] = (add % 10) + '0';
}
}
printf("%s\n", nout);
return (0);
}
